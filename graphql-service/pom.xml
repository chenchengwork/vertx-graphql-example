<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- 继承父类-->
    <parent>
        <artifactId>vertx-graphql-example</artifactId>
        <groupId>com.github.chencheng</groupId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../vertx-graphql-example/pom.xml</relativePath>
    </parent>

    <groupId>com.github.chencheng.graphql</groupId>
    <artifactId>graphql-service</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <!-- the main class -->
        <exec.mainClass>com.github.chencheng.graphql.AppVerticle</exec.mainClass>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
        </dependency>
    </dependencies>

    <build>
        <!--plugins和pluginManagement的区别概述: https://blog.csdn.net/liupeifeng3514/article/details/80236827-->
        <pluginManagement>
            <plugins>
                <!-- We specify the Maven compiler plugin as we need to set it to Java 1.8 -->
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                        <source>1.8</source><!-- 源代码使用的JDK版本 -->
                        <target>1.8</target><!-- 需要生成的目标class文件的编译版本 -->
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <!--
        You only need the part below if you want to build your application into a fat executable jar.
        This is a jar that contains all the dependencies required to run it, so you can just run it with
        java -jar
        -->
        <plugins>
            <!--使用maven-shade-plugin插件将项目打成可执行的jar包-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <!-- 执行package的phase -->
                        <phase>package</phase>
                        <goals>
                            <!-- 为这个phase绑定goal -->
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!-- 打成可执行的jar包 的主方法入口-->
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>${exec.mainClass}</Main-Class>
                                    </manifestEntries>
                                </transformer>
<!--                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">-->
<!--                                    <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>-->
<!--                                </transformer>-->
                            </transformers>

                            <artifactSet>
                            </artifactSet>
                            <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--将依赖包提取到固定的目录-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.4.0</version>
                <executions>
                    <execution>
                        <!-- run the application using the fat jar -->
                        <id>run-app</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-jar</argument>
                                <argument>target/${project.artifactId}-${project.version}-fat.jar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>